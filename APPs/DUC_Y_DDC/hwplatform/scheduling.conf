
objects {
	# Internal interface delay between objects. Any non-negative number is accepted.
	int_obj_delay=0

	# External interface EXTRA delay between processors. Any non-negative number is accepted. (added to int_obj_delay)
	ext_obj_delay=0
	
	# Object execution order. ord: Ordered scheduling; rev: Reversed scheduling 
	obj_sched=rev

	# Minimum objects priority 
	obj_prio=60
	
	# Comma-separated values of the cores the objects can run.
	# Comment the option to run the objects on the first nof_cores processors
	# IMPORTANT: The number of values must be equal to nof_cores in platform.conf   
	core_mapping=0,1,2,3
	
	# Object executable names to profile with valgrind
	valgrind=
	valgrind_tool=callgrind
}
	
kernel {
	# Main kernel timer priority and processor
	prio=90
	cpuid=-1
	
	# priority and processor for the kernel commands process
	cmd_prio=10
	cmd_cpuid=-1
	
	# priority and processor for DAC process
	dac_prio=80
	dac_cpuid=-1

	valgrind_daemons=
	valgrind_tool=callgrind
	
	###
	## Enter here the list of active daemons.
	##    Sensor daemons must be present in every processor. Managers are mandatory
	## just in once processor in the network.
	
	## Stand-alone Mode
		daemons=cmdman,swman,hwman,statsman,frontend,exec,swload,stats,bridge
	
	## Multi-processor environment:
	
		### Manager processor
		#daemons=cmdman,swman,hwman,statsman,frontend,exec,swload,stats,bridge,sync_master
	
		### Node processor
		#daemons=frontend,exec,swload,stats,bridge,sync
	
}

swdaemon_priorities {
	swman=10
	hwman=10
	statsman=10
	frontend=10
	exec=15
	swload=10
	stats=14
	bridge=70
	cmdman=10
	sync=70
	sync_master=70
	
}

# set cpuid to -1 to disable cpu affinity
swdaemon_cpuid {
	swman=-1
	hwman=-1
	statsman=-1
	frontend=-1
	exec=-1
	swload=-1
	stats=-1
	bridge=-1
	cmdman=-1
	sync=-1
	sync_master=-1
}


# Set network threads priority and processor affinity
network {
	base_prio=75
	itf_prio=75
	base_cpuid=-1
	itf_cpuid=-1
}





	
